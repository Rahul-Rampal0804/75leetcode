class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        std::vector<std::vector<int>> result;
        std::sort(nums.begin(), nums.end()); // Sort the array to facilitate two-pointer approach
        
        for (size_t i = 0; i < nums.size(); i++) {
            // Skip duplicate elements for the first number
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            
            int target = -nums[i];
            size_t left = i + 1;
            size_t right = nums.size() - 1;
            
            while (left < right) {
                int sum = nums[left] + nums[right];
                
                if (sum == target) {
                    result.push_back({nums[i], nums[left], nums[right]});
                    
                    // Skip duplicates for the second number
                    while (left < right && nums[left] == nums[left + 1]) left++;
                    
                    // Skip duplicates for the third number
                    while (left < right && nums[right] == nums[right - 1]) right--;
                    
                    // Move pointers inward
                    left++;
                    right--;
                } else if (sum < target) {
                    left++; // Increase the sum by moving the left pointer to the right
                } else {
                    right--; // Decrease the sum by moving the right pointer to the left
                }
            }
        }
        
        return result;
    }
};



// sum of 2 int

class Solution {
public:
    int getSum(int a, int b) {
       while (b != 0) {
            // Calculate carry
            int carry = (a & b) << 1;
            // Calculate sum without carry
            a = a ^ b;
            // Assign carry to b for the next iteration
            b = carry;
        }
        return a; 
    }
};


//2 problems
